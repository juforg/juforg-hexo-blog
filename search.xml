<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[从jekyll转向hexo]]></title>
    <url>%2F2018%2F06%2F27%2F%E4%BB%8Ejekyll%E8%BD%AC%E5%90%91hexo%2F</url>
    <content type="text"><![CDATA[当年选择jekyll是因为看中了HCZ Material theme这个主题，折腾了很久才把博客搭建好，后来周边人准备些博客的时候已经不推荐使用jekyll了，推荐hexo给好几个人，不用他们折腾，（ps：他们折腾有可能折腾到我），但是自己的博客一直没换，主要环境正常吧。虽然很久没有发布新博文了，但是草稿一直在新建，这两天心血来潮准备换博客]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jekins配合sonar配置]]></title>
    <url>%2F2016%2F12%2F30%2F2016-12-30-jekins%E9%85%8D%E5%90%88sonar%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[What ?Sonar是一个用于代码质量管理的开源平台 Why ?Where?https://www.sonarqube.org/ How?sonar安装下载useradd sonarpasswd sonarcd /opt/soft/wget https://sonarsource.bintray.com/Distribution/sonarqube/sonarqube-5.6.4.zipunzip sonarqube-5.6.4.zipvi $HOME/.bash_profile 修改如下123PATH=$PATH:$HOME/binSONAR_HOME=/opt/soft/sonarqube-5.6.4export PATH SONAR_HOME 1yum install postgresql 1234mysql&gt; CREATE USER 'sonar'@'%' IDENTIFIED BY 'sonar';mysql&gt; create database sonar;mysql&gt; grant all privileges on sonar.* to 'sonar'@'%' identified by 'sonar';mysql&gt; flush privileges; 编辑${SONAR_HOME}/conf/sonar.properties配置数据库123sonar.jdbc.username=sonarsonar.jdbc.password=sonarsonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance 启动${SONAR_HOME}/bin/linux-x86-64/sonar.sh start 在浏览器中访问 http://localhost:9000/ 修改默认端口为 9009 ，否则和 hdfs冲突vi ${SONAR_HOME}/conf/sonar.propertiessonar.web.port=9009{SONAR_HOME}/bin/linux-x86-64/sonar.sh restart 插件 如果未联网将下载后的插件上传到${SONAR_HOME}/extensions\plugins目录下，重新启动sonar 如果联网http://docs.sonarqube.org/display/SONAR/Installing+a+Pluginadmin登录后，点击Administer –&gt;system &gt; update center sonarqube scannerhttps://sonarsource.bintray.com/Distribution/sonar-scanner-cli/sonar-scanner-2.5.1.zip jekins安装下载useradd jekinspasswd jekinscd /opt/soft/1234sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.reposudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key`yum install jenkinsservice jenkins start 登录及初始化http://ip:8080/jenkins第一次安装jenkins的时候，会提示你要求输入安装密码，cat /var/lib/jenkins/secrets/initialAdminPassword按照提示将密码粘贴到对应的输入狂即可 修改默认端口vi /etc/sysconfig/jenkins 1JENKINS_PORT=&quot;8084&quot; service jenkins start 选择 sonar 插件，安装重启 maven安装 跳转到软件目录cd /opt/soft 下载wget http://mirrors.cnnic.cn/apache/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gztar zxvf apache-maven-3.3.9-bin.tar.gz 修改环境变量vi ~/.bash_profile 12export M2_HOME=/opt/soft/apache-maven-3.3.9export PATH=$PATH:$M2_HOME/bin 使生效source ~/.bash_profile 验证是否成功mvn -version git安装 安装依赖yum install curl-devel expat-devel gettext-devel openssl-devel zlib-develyum install gcc perl-ExtUtils-MakeMaker 下载源码wget https://github.com/git/git/archive/v2.5.0.tar.gz 解压 12tar zxvf v2.5.0.tar.gzcd git-2.5.0/ 编译安装 12make prefix=/usr/local/git allmake prefix=/usr/local/git install 添加系统变量echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/bashrc 使生效source /etc/bashrc 验证 删除源码rm -rf git-2.5.0 v2.5.0.tar.gz svn安装yum install subversion 验证svnserve --version jenkins构建配置 123456sonar.projectKey=mypaysonar.projectName=mypaysonar.projectVersion=1.0sonar.sources=src/mainsonar.binaries=target/classessonar.exclusions=src/main/webapp/assets/**,src/main/webapp/plugins/**,src/main/webapp/mobile/**,src/main/ressources/**]]></content>
      <categories>
        <category>essay</category>
      </categories>
      <tags>
        <tag>jekins sonar svn git centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven使用tips]]></title>
    <url>%2F2016%2F12%2F18%2F2016-12-18-maven%E4%BD%BF%E7%94%A8tips%2F</url>
    <content type="text"><![CDATA[命令行根据archetype创建项目mvn archetype:generatemvn archetype:generate -X debug模式mvn archetype:generate -DarchetypeCatalog=internal 本地模式 http://blog.csdn.net/u011303778/article/details/46534601 mac 下添加 自定义 archetype 编辑 /Users/${your_username}/Library/Caches/${your_idea_version}/Maven/Indices/UserArchetypes.xml 12345&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;archetypes&gt; &lt;archetype groupId="org.scala-tools.archetypes" artifactId="scala-archetype-simple" version="1.3" /&gt; &lt;archetype groupId="org.sparkinaction" artifactId="scala-archetype-sparkinaction" version="0.13" repository="https://github.com/spark-in-action/scala-archetype-sparkinaction/raw/master" /&gt;&lt;/archetypes&gt; 安装jar至本地nexus 在maven的conf/setting.xml 配置nexus私服的管理账号 在servers标签下添加server123456789101112131415&lt;server&gt; &lt;id&gt;nexus-releases&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin&lt;/password&gt;&lt;/server&gt;&lt;server&gt; &lt;id&gt;nexus-snapshots&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin&lt;/password&gt;&lt;/server&gt;&lt;server&gt; &lt;id&gt;sjrep&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin123&lt;/password&gt;&lt;/server&gt; id可自己定义一个名称 以及私服的管理管的账号密码 在mirrors和profiles下配置nexus私服 在项目的pom.xml中配置 123456789101112&lt;distributionManagement&gt; &lt;repository&gt; &lt;id&gt;nexus-releases&lt;/id&gt; &lt;name&gt;Nexus Release Repository&lt;/name&gt; &lt;url&gt;http://192.168.10.8:18080/nexus/content/repositories/releases/&lt;/url&gt; &lt;/repository&gt; &lt;snapshotRepository&gt; &lt;id&gt;nexus-snapshots&lt;/id&gt; &lt;name&gt;Nexus Snapshot Repository&lt;/name&gt; &lt;url&gt;http://192.168.10.8:18080/nexus/content/repositories/snapshots/&lt;/url&gt; &lt;/snapshotRepository&gt; &lt;/distributionManagement&gt; id与settings.xml中的server的id对应 当项目package后将jar上传到nexus私服mvn deploy]]></content>
      <categories>
        <category>essay</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建maven自定义项目骨架archetype]]></title>
    <url>%2F2016%2F12%2F05%2F2016-12-05-%E8%87%AA%E5%AE%9A%E4%B9%89maven%E9%A1%B9%E7%9B%AE%E9%AA%A8%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[第一步在pom.xml中加入插件12345&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-archetype-plugin&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt;&lt;/plugin&gt; 第二步 这里首先定义了一个archetype.properties文件在命令行被执行的目录，里面的内容是 12345678tablePrefix=ss_packageName=wywk-archetypegroupId=cn.wywkartifactId=defaultprojectversion=1.0-SNAPSHOTexcludePatterns=archetype.filteredExtensions=projectChName=鱼付宝数据管理 命令1mvn clean archetype:create-from-project -Darchetype.properties=../archetype.properties -X 修改archetype 参数 安装archetype到本地mvn install 安装archetype到本地私服服务器 在~/.m2/settings.xml配置文件中servers标签下添加 123456789101112131415&lt;server&gt; &lt;id&gt;wynexus-releases&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin&lt;/password&gt;&lt;/server&gt;&lt;server&gt; &lt;id&gt;wynexus-snapshots&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin&lt;/password&gt;&lt;/server&gt;&lt;server&gt; &lt;id&gt;sjrep&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin123&lt;/password&gt;&lt;/server&gt; 在archetype项目的pom.xml中添加私服地址 123456789101112&lt;distributionManagement&gt; &lt;repository&gt; &lt;id&gt;releases&lt;/id&gt; &lt;name&gt;Micaicms Releases&lt;/name&gt; &lt;url&gt;http://127.0.0.1:8081/nexus/content/repositories/releases/&lt;/url&gt; &lt;/repository&gt; &lt;snapshotRepository&gt; &lt;id&gt;snapshots&lt;/id&gt; &lt;name&gt;Micaicms Releases&lt;/name&gt; &lt;url&gt;http://127.0.0.1:8081/nexus/content/repositories/snapshots/&lt;/url&gt; &lt;/snapshotRepository&gt;&lt;/distributionManagement&gt; 执行命令mvn deploy 创建新项目 mvn archetype:update-local-catalog 使用本地mvn archetype:generate -DarchetypeCatalog=local 用私服mvn archetype:generate -DarchetypeCatalog=http://localhost:8081/nexus/content/groups/public -X]]></content>
      <categories>
        <category>架构师笔记</category>
      </categories>
      <tags>
        <tag>架构师 java maven archetype</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jqGrid翻页无效果debug经历]]></title>
    <url>%2F2016%2F11%2F22%2F2016-11-22-jqgrid%E7%BF%BB%E9%A1%B5%E6%97%A0%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[现象直接点击餐单，后不点击查询按钮，在点击翻页按钮，没有问题如果点击查询按钮后，再点击 翻页按钮，页面刷新不翻页 开始调试 打开chrome开发模式查看网络请求 正常情况（未点击查询按钮） 点击菜单 点击下页按钮 异常情况 点击查询按钮 \ 点击翻页按钮 发现是查询逻辑丢掉了page信息 查看代码 list初始化 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677 jQuery(grid_selector).jqGrid(&#123; url:'list', postData: &#123;'receiptBizType':$('#search_receiptBizType').val()&#125;, datatype: 'json', mtype: "POST", height: "100%", rownumbers: true, rownumWidth:50, colNames:['','回单ID','回单编号','门店共用码','业务类型', '金额','备注','业务日期','状态','订单ID','创建时间','更新时间'], colModel:[ &#123;name:'action',hidden:false,width:30,fixed:true&#125;, &#123;name:'bankReceiptId',sortable:false,editable:false,key:true&#125;, &#123;name:'receiptNo',index:'receipt_no',editable:false&#125;, &#123;name:'commonCode',index:'common_code',editable:false&#125;, // &#123;name:'accoutnName',index:'accoutnName',editable:false&#125;, &#123;name:'receiptBizType',index:'receipt_biz_type',editable:false,formatter:getHideListValue,formatoptions: &#123;code:'TRANS_TYPE'&#125;&#125;, &#123;name:'amount',index:'amount',editable:false,formatter:currencyFormatter, formatoptions:&#123;decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, divide:100,prefix: "￥"&#125;&#125;, //&#123;name:'hamount',index:'hamount',editable:false,formatter:currencyFormatter, formatoptions:&#123;decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "￥"&#125;&#125;, &#123;name:'bizRemark',index:'biz_remark',sortable:false,editable:false&#125;, &#123;name:'bizDate',index:'biz_date',editable:false,formatter:dateFormatter,formatoptions:&#123;dateFormat:'yyyy-MM-dd'&#125;&#125;, &#123;name:'state',editable:false,formatter:getHideListValue,formatoptions: &#123;code:'BANK_RECEIPT_STATE'&#125;,unformat:getHideListValueReverse&#125;, &#123;name:'ordId',index:'ordId',sortable:false,editable:false&#125;, &#123;name:'createDate',index:'create_date',editable:false,formatter:dateFormatter,formatoptions:&#123;dateFormat:'yyyy-MM-dd hh:mm:ss'&#125;&#125;, &#123;name:'lastUpdateDate',index:'last_update_date',editable:false,formatter:dateFormatter,formatoptions:&#123;dateFormat:'yyyy-MM-dd hh:mm:ss'&#125;&#125;, ], viewrecords : true, rowNum:10, rowList:[10,20,50], pager : "#grid-pager", multiselect: false, multiboxonly: false, altRows: true, autowidth: true, autoScroll: false, caption: "银行回单列表", emptyrecords: "未查询到数据", jsonReader : &#123; root:"result", total:'totalPages', page:'page', records:'records' &#125;, loadComplete : function() &#123; var table = this; setTimeout(function()&#123; updatePagerIcons(table); &#125;, 0); &#125;, gridComplete : function()&#123; var ids = jQuery(grid_selector).jqGrid('getDataIDs'); for(var i=0;i &lt; ids.length;i++)&#123; var cl = ids[i]; var rowData = $(grid_selector).getRowData(cl); checkbox = "&lt;label&gt;&lt;input name=\"grid-checkbox\" value=\"" + rowData.bankReceiptId + "\"type=\"checkbox\" class=\"ace\"&gt;&lt;span class=\"lbl\"&gt;&lt;/span&gt;&lt;/label&gt;"; jQuery(grid_selector).jqGrid('setRowData',ids[i],&#123;action:checkbox&#125;); &#125; /** * 窗口缩放时，经动态变化宽度 */ $(window).resize(function()&#123; var winwidth=$('.page-content').width(); //当前页面的宽度 $(grid_selector).setGridWidth(winwidth); $('.ui-jqgrid-bdiv').css('width',winwidth+1); &#125;); /** * 点击菜单边框收缩菜单时，动态变化表格宽度 */ $('#sidebar-collapse').click(function()&#123; var winwidth=$('.main-content .col-xs-12').width(); //当前窗口中，一行的宽度 $(grid_selector).setGridWidth(winwidth); $('.ui-jqgrid-bdiv').css('width',winwidth+1); &#125;); &#125;&#125;); 查询按钮逻辑 12345 /*查询按钮*/$('#search').click(function()&#123; jQuery(grid_selector).jqGrid('clearGridData').jqGrid('setGridParam', &#123; postData: $('#search_form').serialize()&#125;).jqGrid('setGridParam', &#123; 'page': 1 &#125;) .trigger("reloadGrid");&#125;); 没发现异常，删除.jqGrid(&#39;setGridParam&#39;, { postData: $(&#39;#search_form&#39;).serialize()}).后虽然没过滤，但可以翻页，网上查看发现别人在这块的查询参数都是一个一个拼接的json，应该是.serialize()不是json导致的（虽然后台也能接到这些参数），一个一个拼接太麻烦，而且增加查询字段的时候页面添加这里也得添加，容易忘掉，所以当时就是用form的serialize方法一劳永逸，既然此法不行就换个，把整个form转成json，网上有不少自己写的小工具，逻辑就是取出form的所有输入框，循环拼接json，太麻烦，而且每个页面都得加这个工具类，既然已经有这样的需求应该有更好的轮子，果然到github上找到了一个jquery插件叫 jquery.serializeJSON,将这个插件引入到公共页面，小改下代码,将$(&#39;#search_form&#39;).serialize()改为$(&#39;#search_form&#39;).serializeJSON()}) 12345/*查询按钮*/$('#search').click(function()&#123; jQuery(grid_selector).jqGrid('clearGridData').jqGrid('setGridParam', &#123; postData: $('#search_form').serializeJSON()&#125;).jqGrid('setGridParam', &#123; 'page': 1 &#125;) .trigger("reloadGrid");&#125;); 至此问题解决]]></content>
      <categories>
        <category>buger</category>
      </categories>
      <tags>
        <tag>jqGrid js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zookeeper实践]]></title>
    <url>%2F2016%2F09%2F24%2F2016-09-24-zookeeper%2F</url>
    <content type="text"><![CDATA[What?分布式数据一致性 paxos 一致性协议 拜占庭将军问题 zab zookeeper atom broadcast奇数个可以防止脑裂 dubbo Wherehttp://zookeeper.apache.org/ Why?How? 准备3台虚拟机 在每台虚拟机上都添加hosts配置vi /etc/hosts 下载并配置http://www.apache.org/dyn/closer.cgi/zookeeper/ cd /opt/soft wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.8/zookeeper-3.4.8.tar.gz tar zxvf zookeeper-3.4.8.tar.gz cd zookeeper-3.4.8 mkdir data mkdir dataLog vi data/myid 输入1 并保存退出 cp conf/zoo_sample.cfg conf/zoo.cfg vi conf/zoo.cfg 1234567dataDir=/opt/soft/zookeeper-3.4.8/datadataLogDir=/opt/soft/zookeeper-3.4.8/dataLoginitLimit=5syncLimit=2server.1=sj-node1:2888:3888server.2=sj-node2:2888:3888server.3=sj-node3:2888:3888 单台配置完毕 将配置好的拷贝到其它两天虚拟机 scp -r zookeeper-3.4.8 root@sj-nod2:/opt/soft 登录第二台虚拟机，记得hosts文件已配置好 cd /opt/soft/zookeeper-3.4.8 vi data/myid 删除1 输入2 保存退出 启动zookeeper,在3台虚拟机上都输入 /opt/soft/zookeeper-3.4.8/bin/zkServer.sh start 查看集群状态 /opt/soft/zookeeper-3.4.8/bin/zkServer.sh status 主节点 从节点 设置观察节点 观察节点 客户端访问 /opt/soft/zookeeper-3.4.8/bin/zkCli.sh 列出所有1级节点 ls / 创建节点 create /zktest testdata 查询节点数据 get /zktest-]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据 hadoop Zookeeper ha 高可用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VMWare安装CentOS6虚拟机笔记]]></title>
    <url>%2F2016%2F09%2F04%2F2016-09-04-VMWare%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[新建虚拟机后启动， ifconfig无ip vi /etc/sysconfig/network-scripts/ifcfg-eth0 service network restart 如果不能解析域名则 或者将其它能够正常访问的虚拟机的配置/etc/sysconfig/network-scripts/ifcfg-eth0拷贝过来后修改 删除生成的文件使重新生成rm -rf /etc/udev/rules.d/70-persistent-net.rules 修改主机名（克隆过来的虚拟机需要改） vi /etc/sysconfig/network把HOSTNAME的值修改成你想要的主机名 vi /etc/hosts 把localhost.localdomain替换成你的主机名 reboot hostname 启动后输入查看主机名 虚拟机的ip 修改的 ip要服务虚拟机的网段 ifconfig eth1:vip 192.168.57.180 netmask 255.255.255.0 ip addr del 命令 注释 service network restart 网卡重启 service iptables restart 重启防火墙 chkconfig iptables off 关闭防火墙 chkconfig iptables –list 防火墙列表 linux 级别 init 0 关闭 关机 shutdown reboot init 1 init 2 init 3 图形 init 4 init 5 init 6 重启 reboot 系统服务文件夹 /etc/init.d 切换yum源，使自动寻找最近的可用yum源码 12yum install -y epel-releaseyum clean all 若yum出现repomd.xml does not match metalink for epel vi /etc/yum.repos.d/epel.repo注释掉 mirror listyum clean allwget http://yum.baseurl.org/download/3.4/yum-3.4.3.tar.gz 必备1yum install gcc wget openssl-devel pcre-devel zlib-devel vim 安装时钟同步 yum -y install ntp 国内ntp时钟服务器 server time.windows.com ibrust 搜索 能够ping通 执行命令同步 crontab -e回车输入 */10 * * * * /usr/sbin/ntpdate ntp.sjtu.edu.cn chkconfig ntpd on 查看同步情况watch ntpd -p 创建用户及组123groupadd bigdatauseradd -g bigdata bigdataecho &quot;123456&quot;|passwd --stdin bigdata 更换组及拥有人1chown -R bigdata:bigdata elastic 安装memcached yum -y install memcached 安装jdk yum search java | grep -i --color JDK yum install java-1.6.0-openjdk.x86_64 java-1.8.0-openjdk-devel.x86_64 vi /etc/profile在最后加上 123export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk.x86_64 export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin 让配置生效source /etc/profile 复制远程好的安装tomcat解析不了主机route 命令查看路由情况 1route add default gw 192.168.1.1 配置hosts文件 vi /etc/hosts在最后加上 1234192.168.199.101 sj-node1192.168.199.102 sj-node2192.168.199.103 sj-node3192.168.199.104 sj-node4 ip根据自己的虚拟机ip填写 后面的机器别名sj-node*根据自己的喜好随意修改 无密码ssh登录 ssh-keygen -t dsa -P &#39;&#39; -f ~/.ssh/id_dsa cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys scp ~/.ssh/id_dsa sj-node2:~/.ssh/ scp ~/.ssh/id_dsa.pub sj-node2:~/.ssh/ scp ~/.ssh/authorized_keys sj-node2:~/.ssh/ 最后scp 的三个步骤重复操作 将文件拷贝到 sj-node3,sj-node4]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>虚拟机 vmware</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx/tengine编译安装]]></title>
    <url>%2F2016%2F09%2F03%2F2016-09-02-nginx%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[应用场景http://blog.csdn.net/chenyulancn/article/details/70843696 步骤 切换yum源，使自动寻找最近的可用yum源码 12yum install -y epel-releaseyum clean all 安装必须依赖 1yum install gcc wget openssl-devel pcre-devel zlib-devel 创建用户和用户组，为了方便nginx运行而不影响linux安全 12groupadd -r nginxuseradd -r -g nginx -M nginx 下载nginx 12cd /optwget wget http://nginx.org/download/nginx-1.9.9.tar.gz 解压nginx 12 mkdir softtar zxvf nginx-1.9.9.tar.gz 编译前配置nginx 12cd nginx-1.9.9 ./configure --prefix=/usr/local/nginx 最好用配置 开始编译make &amp;&amp; make install mkdir -p /var/tmp/nginx/client cd /etc/init.d vi nginxd 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120#!/bin/bash## chkconfig: - 85 15# description: nginx is a World Wide Web server. It is used to serve# Source function library.. /etc/rc.d/init.d/functions# Source networking configuration.. /etc/sysconfig/network# Check that networking is up.[ "$NETWORKING" = "no" ] &amp;&amp; exit 0nginx="/opt/sxt/soft/tengine-2.1.0/sbin/nginx"prog=$(basename $nginx)NGINX_CONF_FILE="/opt/sxt/soft/tengine-2.1.0/conf/nginx.conf"#[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginxlockfile=/var/lock/subsys/nginx#make_dirs() &#123;# # make required directories# user=`nginx -V 2&gt;&amp;1 | grep "configure arguments:" | sed 's/[^*]*--user=\([^ ]*\).*/\1/g' -`# options=`$nginx -V 2&gt;&amp;1 | grep 'configure arguments:'`# for opt in $options; do# if [ `echo $opt | grep '.*-temp-path'` ]; then# value=`echo $opt | cut -d "=" -f 2`# if [ ! -d "$value" ]; then# # echo "creating" $value# mkdir -p $value &amp;&amp; chown -R $user $value# fi# fi# done#&#125;start() &#123; [ -x $nginx ] || exit 5 [ -f $NGINX_CONF_FILE ] || exit 6# make_dirs echo -n $"Starting $prog: " daemon $nginx -c $NGINX_CONF_FILE retval=$? echo [ $retval -eq 0 ] &amp;&amp; touch $lockfile return $retval&#125;stop() &#123; echo -n $"Stopping $prog: " killproc $prog -QUIT retval=$? echo [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile return $retval&#125;restart() &#123; configtest || return $? stop sleep 1 start &#125;reload() &#123; configtest || return $? echo -n $"Reloading $prog: "# -HUP是nginx平滑重启参数 killproc $nginx -HUP RETVAL=$? echo&#125;force_reload() &#123; restart&#125;configtest() &#123; $nginx -t -c $NGINX_CONF_FILE&#125;rh_status() &#123; status $prog&#125;h_status_q() &#123; rh_status &gt;/dev/null 2&gt;&amp;1ase "$1" in start) rh_status_q &amp;&amp; exit 0 $1 ;; stop) rh_status_q || exit 0 $1 ;; restart|configtest) $1 ;; reload) rh_status_q || exit 7 $1 ;; force-reload) force_reload ;; status) rh_status ;; condrestart|try-restart) rh_status_q || exit 0 ;; *) echo $"Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;" exit 2esac` cd /opt rm -rf tengine-2.1.2 chmod +x nginxd chkconfig --add nginxd 加入系统服务 chkconfig --list nginxd 查看是否加入成功 启动,停止,重新装载service nginxd start|stop|reload/opt/soft/tengine-2.1.2/sbin/nginx -c /opt/soft/tengine-2.1.2/conf/nginx.conf curl localhost出现 welcome 就说明 nginx 启动成功了 18. 文档http://tengine.taobao.org/nginx_docs/cn/docs/httpnginx.org/en/docs/http End]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>负载 nginx linux 大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[alfred配合截图上传七牛图床]]></title>
    <url>%2F2016%2F08%2F02%2F2016-08-02-alfred%E9%85%8D%E5%90%88%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E4%B8%83%E7%89%9B%2F</url>
    <content type="text"><![CDATA[背景 实际上，保存上传找图片地址等步骤可以省略的，方法如下一、 购买afred workflow，没它你啥都干不了二、 注册七牛 https://portal.qiniu.com/signup?code=3lm22tsycqogi 三、 下载workflow，七牛那个 https://github.com/bestswifter/my-workflow 四、 安装完后按照说明配置，就是一点找到conf.txt五、 进入alredworkflwo配置 六、 右击七牛——&gt;open in Finder 七、 单击就可以配置 记住一点 必须有http前缀 最后的步骤就是： ctrl+cmd+a alfred 输入 qn 博文中 ctrl+v 就行 BTY:本文的截图就是用刚刚配置好的图床搞的，效率特高]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>随笔 技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建github Pages 博客]]></title>
    <url>%2F2016%2F07%2F22%2F2016-07-22-%E6%90%AD%E5%BB%BAgithubpages%2F</url>
    <content type="text"><![CDATA[注册github账号 选择静态博客引擎 hexo 或者 jekyll 选择博客模板 安装静态博客引擎 选择写博客工具markdown编辑器 自动部署ftp服务器上glynn 下载https://github.com/dmathieu/glynn sudo gem install -n /usr/local/bin glynn 在jekyll目录执行命令glynn，注意远程服务器的读写权限配置，以及自己jekyll目录中_glynn.yml文件的每一个配置]]></content>
      <categories>
        <category>essay</category>
      </categories>
      <tags>
        <tag>随笔 技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World!]]></title>
    <url>%2F2016%2F07%2F21%2F2016-07-21-hello-world%2F</url>
    <content type="text"><![CDATA[一直在记笔记，以前在笔记中记，有用的发布到博客园，现在感觉要多记一点有意义的，分享出去，早听说github的pages功能最适合码农了，现在在跟上别人的脚步。Any Way, Hello World! 12345678910111213141516171819digraph G &#123;label = &quot;Binary search tree&quot;;node [shape = record];A [label = &quot;&lt;f0&gt;|&lt;f1&gt;A|&lt;f2&gt;&quot;];B [label = &quot;&lt;f0&gt;|&lt;f1&gt;B|&lt;f2&gt;&quot;];C [label = &quot;&lt;f0&gt;|&lt;f1&gt;C|&lt;f2&gt;&quot;];D [label = &quot;&lt;f0&gt;|&lt;f1&gt;D|&lt;f2&gt;&quot;];E [label = &quot;&lt;f0&gt;|&lt;f1&gt;E|&lt;f2&gt;&quot;];F [label = &quot;&lt;f0&gt;|&lt;f1&gt;F|&lt;f2&gt;&quot;];G [label = &quot;&lt;f0&gt;|&lt;f1&gt;G|&lt;f2&gt;&quot;];A:f0 -&gt; B:f1;A:f2 -&gt; C:f1;B:f0 -&gt; D:f1;B:f2 -&gt; E:f1;C:f0 -&gt; F:f1;C:f2 -&gt; G:f1;&#125;]]></content>
      <categories>
        <category>essay</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
